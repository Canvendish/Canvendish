#!groovy

@Library('jenkinslibrary@master') _

//func from shareLibrary
//def build = new org.devops.build()
//def deploy = new org.devops.deploy()
def tools = new org.devops.tools()
def checkout = new org.devops.pullCode()
//def gitlab = new org.devops.gitlab()
//def toemail = new org.devops.toemail()
//def sonar = new org.devops.sonarqube()
//def sonarapi = new org.devops.sonarapi()
//def nexus = new org.devops.nexus()
//def artifactory = new org.devops.artifactory() 


//env
String srcUrl = "http://112.86.227.152:8084/gitlab/jsch/test.git"
//String branchName = "master"
//String buildType = "${env.buildType}"
//String buildShell = "${env.buildShell}"
//String deployHosts = "${env.deployHosts}"
//String srcUrl = "${env.srcUrl}"
//String branchName = "${env.branchName}"
//String artifactUrl = "${env.artifactUrl}"
def runOps



userEmail = "591837974@qq.com"
if (${runOps}=="gitPush"){
    branchName= branch - "refs/heads/"
    currentBuild.description = "Trigger by ${username} ${branchName}"
    //gitlab.ChangeCommitStatus(projectId,commitSha,"running")
    env.runOpts = "gitPush"
}

//pipeline
pipeline {
    agent { node { label "master"}}
    
    options{
        timestamps()
        skipDefaultCheckout()
    }
    stages{

        stage("CheckOut"){
            steps{
                script{
             
                    //println("${branchName}")
                    tools.PrintMes("获取代码","green")
                    println("分支名称":"${branchName}")
                    
                    checkout.getcode(srcUrl,branchName)
                    //checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], 
                      //                doGenerateSubmoduleConfigurations: false, 
                        //              extensions: [], 
                          //            submoduleCfg: [], 
                            //          userRemoteConfigs: [[credentialsId: 'gitlab-admin-user', url: "${srcUrl}"]]])

                }
            }
        }
        stage("Build"){
            steps{
                script{
                    tools.PrintMes("执行打包","green")
                    //build.Build(buildType,buildShell)
                    //artifactory.main(buildType,buildShell)
                    //artifactory.PushArtifact()
                    
                    //上传制品
                    //nexus.main("nexus")
                    
                    //发布制品
                    //sh " wget ${artifactUrl} && ls "
                    
                    
                    


                    //deploy.SaltDeploy("${deployHosts}","test.ping")
                    //deploy.AnsibleDeploy("${deployHosts}","-m ping ")
                }
            }
       }
  }
    
 post {
        always{
            script{
                println("always")
            }
        }
        
        success{
            script{
                println("success")
                //if ("${runOpts}" == "GitlabPush"){
                    //gitlab.ChangeCommitStatus(projectId,commitSha,"success")
                //}
                toemail.Email("流水线成功",userEmail)
            
            }
        }
        /*failure{
            script{
                println("failure")
                if ("${runOpts}" == "GitlabPush"){
                    //gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
                }
                toemail.Email("流水线失败了！",userEmail)
            }
        }
        
        aborted{
            script{
                println("aborted")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
                }
               toemail.Email("流水线被取消了！",userEmail)
            }
        
        }
    
    }*/
 }
}
